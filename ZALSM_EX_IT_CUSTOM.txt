FUNCTION zalsm_ex_it_custom.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(FILENAME) LIKE  RLGRAP-FILENAME
*"     VALUE(I_BEGIN_COL) TYPE  I
*"     VALUE(I_BEGIN_ROW) TYPE  I
*"     VALUE(I_END_COL) TYPE  I
*"     VALUE(I_END_ROW) TYPE  I
*"     REFERENCE(SHEETS) TYPE  I
*"  TABLES
*"      INTERN STRUCTURE  ZALSMEX_TABLINE_CUSTOM
*"  EXCEPTIONS
*"      INCONSISTENT_PARAMETERS
*"      UPLOAD_OLE
*"----------------------------------------------------------------------
  DATA: excel_tab     TYPE  ty_t_sender. " Table for Excel data
  DATA: ld_separator  TYPE  c. " Separator for fields
  DATA: application   TYPE  ole2_object, " OLE object for Excel application
        workbook      TYPE  ole2_object, " OLE object for workbook
        range         TYPE  ole2_object, " OLE object for range
        sheetno       TYPE i, " Sheet number to process
        worksheet     TYPE  ole2_object. " OLE object for worksheet
  DATA: h_cell        TYPE  ole2_object, " OLE object for cell
        h_cell1       TYPE  ole2_object. " Another OLE object for cell

  DATA: ld_rc         TYPE i. " Return code for operations

* Macro for handling error messages
  DEFINE m_message.
    CASE sy-subrc.
      WHEN 0.
        " No error
      WHEN 1.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      WHEN OTHERS.
        RAISE upload_ole. " Raise exception for any other errors
    ENDCASE.
  END-OF-DEFINITION.

* Check input parameters for consistency
  IF i_begin_row > i_end_row. 
    RAISE inconsistent_parameters. 
  ENDIF.
  IF i_begin_col > i_end_col. 
    RAISE inconsistent_parameters. 
  ENDIF.

* Get tab character for field separation
  CLASS cl_abap_char_utilities DEFINITION LOAD.
  ld_separator = cl_abap_char_utilities=>horizontal_tab.

* Open Excel application and workbook
  IF application-header = space OR application-handle = -1.
    CREATE OBJECT application 'Excel.Application'.
    m_message.
  ENDIF.
  CALL METHOD OF application 'Workbooks' = workbook.
  m_message.
  CALL METHOD OF workbook 'Open' EXPORTING #1 = filename.
  m_message.

* Activate the specified sheet
  sheetno = sheets.
  CALL METHOD OF application 'Worksheets' = worksheet EXPORTING #1 = sheetno.
  m_message.
  CALL METHOD OF worksheet 'Activate'.
  m_message.
  GET PROPERTY OF application 'ACTIVESHEET' = worksheet.
  m_message.

* Mark the range of cells to be copied
  CALL METHOD OF worksheet 'Cells' = h_cell
      EXPORTING #1 = i_begin_row #2 = i_begin_col.
  m_message.
  CALL METHOD OF worksheet 'Cells' = h_cell1
      EXPORTING #1 = i_end_row #2 = i_end_col.
  m_message.
  CALL METHOD OF worksheet 'RANGE' = range
                 EXPORTING #1 = h_cell #2 = h_cell1.
  m_message.
  CALL METHOD OF range 'SELECT'.
  m_message.

* Copy the selected range to the clipboard
  CALL METHOD OF range 'COPY'.
  m_message.

* Import clipboard data into ABAP internal table
  CALL METHOD cl_gui_frontend_services=>clipboard_import
    IMPORTING
      data       = excel_tab
    EXCEPTIONS
      cntl_error = 1
      OTHERS     = 4.
  IF sy-subrc <> 0.
    MESSAGE a037(alsmex).
  ENDIF.
  
* Convert and map data from the Excel table
  PERFORM separated_to_intern_convert TABLES excel_tab intern
                                      USING  ld_separator
                                             sheetno.

* Clear the clipboard
  REFRESH excel_tab.
  CALL METHOD cl_gui_frontend_services=>clipboard_export
    IMPORTING
      data       = excel_tab
    CHANGING
      rc         = ld_rc
    EXCEPTIONS
      cntl_error = 1
      OTHERS     = 4.

* Quit Excel and clean up OLE objects
  CALL METHOD OF application 'QUIT'.
  m_message.

* Free all used OLE objects to ensure Excel process is terminated
  FREE OBJECT h_cell.       m_message.
  FREE OBJECT h_cell1.      m_message.
  FREE OBJECT range.        m_message.
  FREE OBJECT worksheet.    m_message.
  FREE OBJECT workbook.     m_message.
  FREE OBJECT application.  m_message.
ENDFUNCTION.
